//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DataModel
{
	/// <summary>
	/// Database       : ddvgjkj06h7ps1
	/// Data Source    : ec2-54-225-101-199.compute-1.amazonaws.com
	/// Server Version : 9.3.3
	/// </summary>
	public partial class ddvgjkj06h7ps1DB : LinqToDB.Data.DataConnection
	{
		public ITable<Actor>          Actors         { get { return this.GetTable<Actor>(); } }
		public ITable<ActorRole>      ActorRoles     { get { return this.GetTable<ActorRole>(); } }
		public ITable<DataFile>       DataFiles      { get { return this.GetTable<DataFile>(); } }
		public ITable<FileMapping>    FileMappings   { get { return this.GetTable<FileMapping>(); } }
		public ITable<Hierarchy>      Hierarchies    { get { return this.GetTable<Hierarchy>(); } }
		public ITable<HierarchyType>  HierarchyTypes { get { return this.GetTable<HierarchyType>(); } }
		public ITable<Journey>        Journeys       { get { return this.GetTable<Journey>(); } }
		public ITable<JourneyDetail>  JourneyDetails { get { return this.GetTable<JourneyDetail>(); } }
		public ITable<logged_actions> logged_actions { get { return this.GetTable<logged_actions>(); } }
		public ITable<Module>         Modules        { get { return this.GetTable<Module>(); } }
		public ITable<ObjectType>     ObjectTypes    { get { return this.GetTable<ObjectType>(); } }
		public ITable<Role>           Roles          { get { return this.GetTable<Role>(); } }
		public ITable<SourceFile>     SourceFiles    { get { return this.GetTable<SourceFile>(); } }

		public ddvgjkj06h7ps1DB()
		{
		}

		public ddvgjkj06h7ps1DB(string configuration)
			: base(configuration)
		{
		}
	}

	[Table(Schema="public", Name="Actor")]
	public partial class Actor
	{
		[PrimaryKey, Identity   ] public int       ActorId        { get; set; } // integer
		[Column,     NotNull    ] public string    ActorName      { get; set; } // character varying(255)
		[Column,     NotNull    ] public string    Password       { get; set; } // character varying(4000)
		[Column,        Nullable] public string    RegistrationId { get; set; } // character varying(255)
		[Column,        Nullable] public DateTime? RegisteredDate { get; set; } // date
		[Column,     NotNull    ] public DateTime  CreatedDate    { get; set; } // date
		[Column,     NotNull    ] public string    CreatedBy      { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime  ModifiedDate   { get; set; } // date
		[Column,     NotNull    ] public string    ModifiedBy     { get; set; } // character varying(255)
		[Column,        Nullable] public bool?     Deleted        { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_ActorRole_Actor_BackReference
		/// </summary>
		[Association(ThisKey="ActorId", OtherKey="ActorId", CanBeNull=false)]
		public IEnumerable<ActorRole> ActorRoles { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ActorRole")]
	public partial class ActorRole
	{
		[Column,     NotNull    ] public int      ActorId      { get; set; } // integer
		[PrimaryKey, NotNull    ] public int      RoleId       { get; set; } // integer
		[Column,     NotNull    ] public DateTime CreatedDate  { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy    { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy   { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted      { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_ActorRole_Actor
		/// </summary>
		[Association(ThisKey="ActorId", OtherKey="ActorId", CanBeNull=false)]
		public Actor Actor { get; set; }

		/// <summary>
		/// FK_ActorRole_Role
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="RoleId", CanBeNull=false)]
		public Role Role { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="DataFile")]
	public partial class DataFile
	{
		[PrimaryKey, Identity   ] public int       DataFileId        { get; set; } // integer
		[Column,        Nullable] public string    Filename          { get; set; } // character varying(255)
		[Column,        Nullable] public int?      FileMappingId     { get; set; } // integer
		[Column,        Nullable] public DateTime? ValidatedDate     { get; set; } // date
		[Column,        Nullable] public DateTime? ImportedDate      { get; set; } // date
		[Column,        Nullable] public int?      TotalRows         { get; set; } // integer
		[Column,        Nullable] public int?      TotalImportedRows { get; set; } // integer
		[Column,        Nullable] public int?      RowsToSkip        { get; set; } // integer
		[Column,        Nullable] public string    Delimiter         { get; set; } // character varying(10)
		[Column,        Nullable] public bool?     FirstRowIsHeader  { get; set; } // boolean
		[Column,        Nullable] public string    LineFeed          { get; set; } // character varying(10)
		[Column,     NotNull    ] public DateTime  CreatedDate       { get; set; } // date
		[Column,     NotNull    ] public string    CreatedBy         { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime  ModifiedDate      { get; set; } // date
		[Column,     NotNull    ] public string    ModifiedBy        { get; set; } // character varying(255)
		[Column,        Nullable] public bool?     Deleted           { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_DataFile_FileMapping
		/// </summary>
		[Association(ThisKey="FileMappingId", OtherKey="FileMappingId", CanBeNull=true)]
		public FileMapping FileMapping { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="FileMapping")]
	public partial class FileMapping
	{
		[PrimaryKey, Identity   ] public int      FileMappingId     { get; set; } // integer
		[Column,     NotNull    ] public int      SourceFileId      { get; set; } // integer
		[Column,        Nullable] public string   FileMappingName   { get; set; } // character varying(255)
		[Column,        Nullable] public string   Attributes        { get; set; } // xml
		[Column,        Nullable] public int?     RowsToSkip        { get; set; } // integer
		[Column,        Nullable] public string   Delimiter         { get; set; } // character varying(10)
		[Column,        Nullable] public bool?    FirstRowIsHeader  { get; set; } // boolean
		[Column,        Nullable] public string   LineFeed          { get; set; } // character varying(10)
		[Column,        Nullable] public int?     ObjectTypeId      { get; set; } // integer
		[Column,        Nullable] public int?     SourceHierarchyId { get; set; } // integer
		[Column,        Nullable] public int?     TargetHierarchyId { get; set; } // integer
		[Column,     NotNull    ] public DateTime CreatedDate       { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy         { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate      { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy        { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted           { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_FileMapping_ObjectType
		/// </summary>
		[Association(ThisKey="ObjectTypeId", OtherKey="ObjectTypeId", CanBeNull=true)]
		public ObjectType ObjectType { get; set; }

		/// <summary>
		/// FK_FileMapping_SourceFile
		/// </summary>
		[Association(ThisKey="SourceFileId", OtherKey="SourceFileId", CanBeNull=false)]
		public SourceFile SourceFile { get; set; }

		/// <summary>
		/// FK_FileMapping_SourceHierarchy
		/// </summary>
		[Association(ThisKey="SourceHierarchyId", OtherKey="HierarchyId", CanBeNull=true)]
		public Hierarchy SourceHierarchy { get; set; }

		/// <summary>
		/// FK_FileMapping_TargetHierarchy
		/// </summary>
		[Association(ThisKey="TargetHierarchyId", OtherKey="HierarchyId", CanBeNull=true)]
		public Hierarchy TargetHierarchy { get; set; }

		/// <summary>
		/// FK_DataFile_FileMapping_BackReference
		/// </summary>
		[Association(ThisKey="FileMappingId", OtherKey="FileMappingId", CanBeNull=false)]
		public IEnumerable<DataFile> DataFiles { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Hierarchy")]
	public partial class Hierarchy
	{
		[PrimaryKey, Identity   ] public int      HierarchyId       { get; set; } // integer
		[Column,        Nullable] public int?     HierarchyTypeId   { get; set; } // integer
		[Column,     NotNull    ] public string   HierarchyName     { get; set; } // character varying(255)
		[Column,        Nullable] public int?     ParentHierarchyId { get; set; } // integer
		[Column,        Nullable] public string   Attributes        { get; set; } // xml
		[Column,     NotNull    ] public DateTime CreatedDate       { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy         { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate      { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy        { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted           { get; set; } // boolean

		#region Associations

		/// <summary>
		/// HierarchyType_fk
		/// </summary>
		[Association(ThisKey="HierarchyTypeId", OtherKey="HierarchyTypeId", CanBeNull=true)]
		public HierarchyType HierarchyTypefk { get; set; }

		/// <summary>
		/// FK_Hierarchy_Parent
		/// </summary>
		[Association(ThisKey="ParentHierarchyId", OtherKey="HierarchyId", CanBeNull=true)]
		public Hierarchy Parent { get; set; }

		/// <summary>
		/// FK_FileMapping_SourceHierarchy_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="SourceHierarchyId", CanBeNull=false)]
		public IEnumerable<FileMapping> FileMappingSourceHierarchies { get; set; }

		/// <summary>
		/// FK_FileMapping_TargetHierarchy_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="TargetHierarchyId", CanBeNull=false)]
		public IEnumerable<FileMapping> FileMappingTargetHierarchies { get; set; }

		/// <summary>
		/// FK_Journey_Hierarchy_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="HierarchyId", CanBeNull=false)]
		public IEnumerable<Journey> Journeys { get; set; }

		/// <summary>
		/// FK_Role_HierarchyId_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="HierarchyId", CanBeNull=false)]
		public IEnumerable<Role> RoleHierarchyIds { get; set; }

		/// <summary>
		/// FK_Hierarchy_Parent_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="ParentHierarchyId", CanBeNull=false)]
		public IEnumerable<Hierarchy> FK_Hierarchy_Parent_BackReferences { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="HierarchyType")]
	public partial class HierarchyType
	{
		[PrimaryKey, Identity   ] public int      HierarchyTypeId       { get; set; } // integer
		[Column,        Nullable] public string   HierarchyTypeName     { get; set; } // character varying(255)
		[Column,        Nullable] public string   Attributes            { get; set; } // xml
		[Column,        Nullable] public int?     ParentHierarchyTypeId { get; set; } // integer
		[Column,     NotNull    ] public DateTime CreatedDate           { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy             { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate          { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy            { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted               { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_HierarchyType_Parent
		/// </summary>
		[Association(ThisKey="ParentHierarchyTypeId", OtherKey="HierarchyTypeId", CanBeNull=true)]
		public HierarchyType Parent { get; set; }

		/// <summary>
		/// FK_HierarchyType_Parent_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyTypeId", OtherKey="ParentHierarchyTypeId", CanBeNull=false)]
		public IEnumerable<HierarchyType> FK_HierarchyType_Parent_BackReferences { get; set; }

		/// <summary>
		/// HierarchyType_fk_BackReference
		/// </summary>
		[Association(ThisKey="HierarchyTypeId", OtherKey="HierarchyTypeId", CanBeNull=false)]
		public IEnumerable<Hierarchy> fks { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Journey")]
	public partial class Journey
	{
		[PrimaryKey, Identity   ] public int      JourneyId    { get; set; } // integer
		[Column,        Nullable] public int?     HierarchyId  { get; set; } // integer
		[Column,     NotNull    ] public string   JourneyName  { get; set; } // character varying(255)
		[Column,        Nullable] public string   Attributes   { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime CreatedDate  { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy    { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy   { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted      { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_Journey_Hierarchy
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="HierarchyId", CanBeNull=true)]
		public Hierarchy Hierarchy { get; set; }

		/// <summary>
		/// FK_JourneyDetail_Journey_BackReference
		/// </summary>
		[Association(ThisKey="JourneyId", OtherKey="JourneyId", CanBeNull=false)]
		public IEnumerable<JourneyDetail> JourneyDetails { get; set; }

		/// <summary>
		/// FK_JourneyDetail_NextJourney_BackReference
		/// </summary>
		[Association(ThisKey="JourneyId", OtherKey="NextJourneyId", CanBeNull=false)]
		public IEnumerable<JourneyDetail> JourneyDetailNextJourneys { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="JourneyDetail")]
	public partial class JourneyDetail
	{
		[PrimaryKey, Identity   ] public int      JourneyDetailId { get; set; } // integer
		[Column,     NotNull    ] public int      JourneyId       { get; set; } // integer
		[Column,     NotNull    ] public bool     StartNode       { get; set; } // boolean
		[Column,     NotNull    ] public bool     EndNode         { get; set; } // boolean
		[Column,        Nullable] public int?     NextJourneyId   { get; set; } // integer
		[Column,     NotNull    ] public bool     Mandatory       { get; set; } // boolean
		[Column,     NotNull    ] public DateTime CreatedDate     { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy       { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate    { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy      { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted         { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_JourneyDetail_Journey
		/// </summary>
		[Association(ThisKey="JourneyId", OtherKey="JourneyId", CanBeNull=false)]
		public Journey Journey { get; set; }

		/// <summary>
		/// FK_JourneyDetail_NextJourney
		/// </summary>
		[Association(ThisKey="NextJourneyId", OtherKey="JourneyId", CanBeNull=true)]
		public Journey NextJourney { get; set; }

		#endregion
	}

	[Table(Schema="audit", Name="logged_actions")]
	public partial class logged_actions
	{
		[PrimaryKey, Identity   ] public long           event_id          { get; set; } // bigint
		[Column,     NotNull    ] public string         schema_name       { get; set; } // text
		[Column,     NotNull    ] public string         table_name        { get; set; } // text
		[Column,     NotNull    ] public int            relid             { get; set; } // oid
		[Column,        Nullable] public string         session_user_name { get; set; } // text
		[Column,     NotNull    ] public DateTimeOffset action_tstamp_tx  { get; set; } // timestamp (6) with time zone
		[Column,     NotNull    ] public DateTimeOffset action_tstamp_stm { get; set; } // timestamp (6) with time zone
		[Column,     NotNull    ] public DateTimeOffset action_tstamp_clk { get; set; } // timestamp (6) with time zone
		[Column,        Nullable] public long?          transaction_id    { get; set; } // bigint
		[Column,        Nullable] public string         application_name  { get; set; } // text
		[Column,        Nullable] public object         client_addr       { get; set; } // inet
		[Column,        Nullable] public int?           client_port       { get; set; } // integer
		[Column,     NotNull    ] public string         client_query      { get; set; } // text
		[Column,     NotNull    ] public string         action            { get; set; } // text
		[Column,        Nullable] public object         row_data          { get; set; } // USER-DEFINED
		[Column,        Nullable] public object         changed_fields    { get; set; } // USER-DEFINED
		[Column,     NotNull    ] public bool           statement_only    { get; set; } // boolean
	}

	[Table(Schema="public", Name="Module")]
	public partial class Module
	{
		[PrimaryKey, Identity   ] public int      ModuleId     { get; set; } // integer
		[Column,     NotNull    ] public string   ModuleName   { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime CreatedDate  { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy    { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy   { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted      { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_Role_Module_BackReference
		/// </summary>
		[Association(ThisKey="ModuleId", OtherKey="ModuleId", CanBeNull=false)]
		public IEnumerable<Role> Roles { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="ObjectType")]
	public partial class ObjectType
	{
		[PrimaryKey, Identity   ] public int      ObjectTypeId          { get; set; } // integer
		[Column,     NotNull    ] public string   ObjectTypeName        { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime CreatedDate           { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy             { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate          { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy            { get; set; } // character varying(255)
		[Column,        Nullable] public string   ObjectTypeDescription { get; set; } // character varying(600)
		[Column,        Nullable] public bool?    Deleted               { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_FileMapping_ObjectType_BackReference
		/// </summary>
		[Association(ThisKey="ObjectTypeId", OtherKey="ObjectTypeId", CanBeNull=false)]
		public IEnumerable<FileMapping> FileMappings { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="Role")]
	public partial class Role
	{
		[PrimaryKey, Identity   ] public int      RoleId       { get; set; } // integer
		[Column,        Nullable] public int?     ModuleId     { get; set; } // integer
		[Column,        Nullable] public int?     HierarchyId  { get; set; } // integer
		[Column,     NotNull    ] public string   RoleName     { get; set; } // character varying(255)
		[Column,     NotNull    ] public bool     Select       { get; set; } // boolean
		[Column,     NotNull    ] public bool     Insert       { get; set; } // boolean
		[Column,     NotNull    ] public bool     Update       { get; set; } // boolean
		[Column,     NotNull    ] public bool     Delete       { get; set; } // boolean
		[Column,     NotNull    ] public DateTime CreatedDate  { get; set; } // date
		[Column,     NotNull    ] public string   CreatedBy    { get; set; } // character varying(255)
		[Column,     NotNull    ] public DateTime ModifiedDate { get; set; } // date
		[Column,     NotNull    ] public string   ModifiedBy   { get; set; } // character varying(255)
		[Column,        Nullable] public bool?    Deleted      { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_Role_Module
		/// </summary>
		[Association(ThisKey="ModuleId", OtherKey="ModuleId", CanBeNull=true)]
		public Module Module { get; set; }

		/// <summary>
		/// FK_Role_HierarchyId
		/// </summary>
		[Association(ThisKey="HierarchyId", OtherKey="HierarchyId", CanBeNull=true)]
		public Hierarchy FK_Role_HierarchyId { get; set; }

		/// <summary>
		/// FK_ActorRole_Role_BackReference
		/// </summary>
		[Association(ThisKey="RoleId", OtherKey="RoleId", CanBeNull=false)]
		public ActorRole ActorRole { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="SourceFile")]
	public partial class SourceFile
	{
		[PrimaryKey, Identity   ] public int       SourceFileId { get; set; } // integer
		[Column,     NotNull    ] public string    Filename     { get; set; } // character varying(500)
		[Column,     NotNull    ] public string    TableName    { get; set; } // character varying(60)
		[Column,        Nullable] public DateTime? CreatedDate  { get; set; } // date
		[Column,        Nullable] public string    CreatedBy    { get; set; } // character varying(255)
		[Column,        Nullable] public DateTime? ModifiedDate { get; set; } // date
		[Column,        Nullable] public string    ModifiedBy   { get; set; } // character varying(255)
		[Column,        Nullable] public bool?     Deleted      { get; set; } // boolean

		#region Associations

		/// <summary>
		/// FK_FileMapping_SourceFile_BackReference
		/// </summary>
		[Association(ThisKey="SourceFileId", OtherKey="SourceFileId", CanBeNull=false)]
		public IEnumerable<FileMapping> FileMappings { get; set; }

		#endregion
	}

	public static partial class tableExtensions
	{
		public static Actor Find(this ITable<Actor> table, int ActorId)
		{
			return table.FirstOrDefault(t =>
				t.ActorId == ActorId);
		}

		public static ActorRole Find(this ITable<ActorRole> table, int RoleId)
		{
			return table.FirstOrDefault(t =>
				t.RoleId == RoleId);
		}

		public static DataFile Find(this ITable<DataFile> table, int DataFileId)
		{
			return table.FirstOrDefault(t =>
				t.DataFileId == DataFileId);
		}

		public static FileMapping Find(this ITable<FileMapping> table, int FileMappingId)
		{
			return table.FirstOrDefault(t =>
				t.FileMappingId == FileMappingId);
		}

		public static Hierarchy Find(this ITable<Hierarchy> table, int HierarchyId)
		{
			return table.FirstOrDefault(t =>
				t.HierarchyId == HierarchyId);
		}

		public static HierarchyType Find(this ITable<HierarchyType> table, int HierarchyTypeId)
		{
			return table.FirstOrDefault(t =>
				t.HierarchyTypeId == HierarchyTypeId);
		}

		public static Journey Find(this ITable<Journey> table, int JourneyId)
		{
			return table.FirstOrDefault(t =>
				t.JourneyId == JourneyId);
		}

		public static JourneyDetail Find(this ITable<JourneyDetail> table, int JourneyDetailId)
		{
			return table.FirstOrDefault(t =>
				t.JourneyDetailId == JourneyDetailId);
		}

		public static logged_actions Find(this ITable<logged_actions> table, long event_id)
		{
			return table.FirstOrDefault(t =>
				t.event_id == event_id);
		}

		public static Module Find(this ITable<Module> table, int ModuleId)
		{
			return table.FirstOrDefault(t =>
				t.ModuleId == ModuleId);
		}

		public static ObjectType Find(this ITable<ObjectType> table, int ObjectTypeId)
		{
			return table.FirstOrDefault(t =>
				t.ObjectTypeId == ObjectTypeId);
		}

		public static Role Find(this ITable<Role> table, int RoleId)
		{
			return table.FirstOrDefault(t =>
				t.RoleId == RoleId);
		}

		public static SourceFile Find(this ITable<SourceFile> table, int SourceFileId)
		{
			return table.FirstOrDefault(t =>
				t.SourceFileId == SourceFileId);
		}
	}
}
